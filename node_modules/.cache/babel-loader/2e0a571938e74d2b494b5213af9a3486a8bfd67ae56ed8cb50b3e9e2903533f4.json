{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { _generateLinkResponse, _request, _userResponse } from './lib/fetch';\nimport { resolveFetch } from './lib/helpers';\nimport { isAuthError } from './lib/errors';\nexport default class GoTrueAdminApi {\n  constructor(_ref) {\n    let {\n      url = '',\n      headers = {},\n      fetch\n    } = _ref;\n    this.url = url;\n    this.headers = headers;\n    this.fetch = resolveFetch(fetch);\n    this.mfa = {\n      listFactors: this._listFactors.bind(this),\n      deleteFactor: this._deleteFactor.bind(this)\n    };\n  }\n  /**\n   * Removes a logged-in session.\n   * @param jwt A valid, logged-in JWT.\n   */\n  signOut(jwt) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield _request(this.fetch, 'POST', `${this.url}/logout`, {\n          headers: this.headers,\n          jwt,\n          noResolveJson: true\n        });\n        return {\n          data: null,\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Sends an invite link to an email address.\n   * @param email The email address of the user.\n   * @param options.redirectTo A URL or mobile deeplink to send the user to after they are confirmed.\n   * @param options.data Optional user metadata\n   */\n  inviteUserByEmail(email) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield _request(this.fetch, 'POST', `${this.url}/invite`, {\n          body: {\n            email,\n            data: options.data\n          },\n          headers: this.headers,\n          redirectTo: options.redirectTo,\n          xform: _userResponse\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Generates email links and OTPs to be sent via a custom email provider.\n   * @param email The user's email.\n   * @param options.password User password. For signup only.\n   * @param options.data Optional user metadata. For signup only.\n   * @param options.redirectTo The redirect url which should be appended to the generated link\n   */\n  generateLink(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n            options\n          } = params,\n          rest = __rest(params, [\"options\"]);\n        const body = Object.assign(Object.assign({}, rest), options);\n        if ('newEmail' in rest) {\n          // replace newEmail with new_email in request body\n          body.new_email = rest === null || rest === void 0 ? void 0 : rest.newEmail;\n          delete body['newEmail'];\n        }\n        return yield _request(this.fetch, 'POST', `${this.url}/admin/generate_link`, {\n          body: body,\n          headers: this.headers,\n          xform: _generateLinkResponse,\n          redirectTo: options === null || options === void 0 ? void 0 : options.redirectTo\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              properties: null,\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  // User Admin API\n  /**\n   * Creates a new user.\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  createUser(attributes) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield _request(this.fetch, 'POST', `${this.url}/admin/users`, {\n          body: attributes,\n          headers: this.headers,\n          xform: _userResponse\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Get a list of users.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  listUsers() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          data,\n          error\n        } = yield _request(this.fetch, 'GET', `${this.url}/admin/users`, {\n          headers: this.headers\n        });\n        if (error) throw error;\n        return {\n          data: Object.assign({}, data),\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              users: []\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Get user by id.\n   *\n   * @param uid The user's unique identifier\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  getUserById(uid) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield _request(this.fetch, 'GET', `${this.url}/admin/users/${uid}`, {\n          headers: this.headers,\n          xform: _userResponse\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Updates the user data.\n   *\n   * @param attributes The data you want to update.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  updateUserById(uid, attributes) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield _request(this.fetch, 'PUT', `${this.url}/admin/users/${uid}`, {\n          body: attributes,\n          headers: this.headers,\n          xform: _userResponse\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Delete a user. Requires a `service_role` key.\n   *\n   * @param id The user id you want to remove.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  deleteUser(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield _request(this.fetch, 'DELETE', `${this.url}/admin/users/${id}`, {\n          headers: this.headers,\n          xform: _userResponse\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null\n            },\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  _listFactors(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield _request(this.fetch, 'GET', `${this.url}/admin/users/${params.userId}/factors`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  _deleteFactor(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield _request(this.fetch, 'DELETE', `${this.url}/admin/users/${params.userId}/factors/${params.id}`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["_generateLinkResponse","_request","_userResponse","resolveFetch","isAuthError","GoTrueAdminApi","constructor","url","headers","fetch","mfa","listFactors","_listFactors","bind","deleteFactor","_deleteFactor","signOut","jwt","noResolveJson","data","error","inviteUserByEmail","email","options","body","redirectTo","xform","user","generateLink","params","rest","new_email","newEmail","properties","createUser","attributes","listUsers","users","getUserById","uid","updateUserById","deleteUser","id","userId"],"sources":["/Users/weiqi/Desktop/Real-or-Fake-Facts/node_modules/@supabase/gotrue-js/src/GoTrueAdminApi.ts"],"sourcesContent":["import { Fetch, _generateLinkResponse, _request, _userResponse } from './lib/fetch'\nimport { resolveFetch } from './lib/helpers'\nimport {\n  AdminUserAttributes,\n  GenerateLinkParams,\n  GenerateLinkResponse,\n  User,\n  UserResponse,\n  GoTrueAdminMFAApi,\n  AuthMFAAdminDeleteFactorParams,\n  AuthMFAAdminDeleteFactorResponse,\n  AuthMFAAdminListFactorsParams,\n  AuthMFAAdminListFactorsResponse,\n} from './lib/types'\nimport { AuthError, isAuthError } from './lib/errors'\n\nexport default class GoTrueAdminApi {\n  /** Contains all MFA administration methods. */\n  mfa: GoTrueAdminMFAApi\n\n  protected url: string\n  protected headers: {\n    [key: string]: string\n  }\n  protected fetch: Fetch\n\n  constructor({\n    url = '',\n    headers = {},\n    fetch,\n  }: {\n    url: string\n    headers?: {\n      [key: string]: string\n    }\n    fetch?: Fetch\n  }) {\n    this.url = url\n    this.headers = headers\n    this.fetch = resolveFetch(fetch)\n    this.mfa = {\n      listFactors: this._listFactors.bind(this),\n      deleteFactor: this._deleteFactor.bind(this),\n    }\n  }\n\n  /**\n   * Removes a logged-in session.\n   * @param jwt A valid, logged-in JWT.\n   */\n  async signOut(jwt: string): Promise<{ data: null; error: AuthError | null }> {\n    try {\n      await _request(this.fetch, 'POST', `${this.url}/logout`, {\n        headers: this.headers,\n        jwt,\n        noResolveJson: true,\n      })\n      return { data: null, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Sends an invite link to an email address.\n   * @param email The email address of the user.\n   * @param options.redirectTo A URL or mobile deeplink to send the user to after they are confirmed.\n   * @param options.data Optional user metadata\n   */\n  async inviteUserByEmail(\n    email: string,\n    options: {\n      redirectTo?: string\n      data?: object\n    } = {}\n  ): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/invite`, {\n        body: { email, data: options.data },\n        headers: this.headers,\n        redirectTo: options.redirectTo,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Generates email links and OTPs to be sent via a custom email provider.\n   * @param email The user's email.\n   * @param options.password User password. For signup only.\n   * @param options.data Optional user metadata. For signup only.\n   * @param options.redirectTo The redirect url which should be appended to the generated link\n   */\n  async generateLink(params: GenerateLinkParams): Promise<GenerateLinkResponse> {\n    try {\n      const { options, ...rest } = params\n      const body: any = { ...rest, ...options }\n      if ('newEmail' in rest) {\n        // replace newEmail with new_email in request body\n        body.new_email = rest?.newEmail\n        delete body['newEmail']\n      }\n      return await _request(this.fetch, 'POST', `${this.url}/admin/generate_link`, {\n        body: body,\n        headers: this.headers,\n        xform: _generateLinkResponse,\n        redirectTo: options?.redirectTo,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            properties: null,\n            user: null,\n          },\n          error,\n        }\n      }\n      throw error\n    }\n  }\n\n  // User Admin API\n  /**\n   * Creates a new user.\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async createUser(attributes: AdminUserAttributes): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/admin/users`, {\n        body: attributes,\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Get a list of users.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async listUsers(): Promise<\n    { data: { users: User[] }; error: null } | { data: { users: [] }; error: AuthError }\n  > {\n    try {\n      const { data, error } = await _request(this.fetch, 'GET', `${this.url}/admin/users`, {\n        headers: this.headers,\n      })\n      if (error) throw error\n      return { data: { ...data }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { users: [] }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Get user by id.\n   *\n   * @param uid The user's unique identifier\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async getUserById(uid: string): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'GET', `${this.url}/admin/users/${uid}`, {\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates the user data.\n   *\n   * @param attributes The data you want to update.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async updateUserById(uid: string, attributes: AdminUserAttributes): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'PUT', `${this.url}/admin/users/${uid}`, {\n        body: attributes,\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Delete a user. Requires a `service_role` key.\n   *\n   * @param id The user id you want to remove.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async deleteUser(id: string): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'DELETE', `${this.url}/admin/users/${id}`, {\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  private async _listFactors(\n    params: AuthMFAAdminListFactorsParams\n  ): Promise<AuthMFAAdminListFactorsResponse> {\n    try {\n      const data = await _request(\n        this.fetch,\n        'GET',\n        `${this.url}/admin/users/${params.userId}/factors`,\n        {\n          headers: this.headers,\n        }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  private async _deleteFactor(\n    params: AuthMFAAdminDeleteFactorParams\n  ): Promise<AuthMFAAdminDeleteFactorResponse> {\n    try {\n      const data = await _request(\n        this.fetch,\n        'DELETE',\n        `${this.url}/admin/users/${params.userId}/factors/${params.id}`,\n        {\n          headers: this.headers,\n        }\n      )\n\n      return { data, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}