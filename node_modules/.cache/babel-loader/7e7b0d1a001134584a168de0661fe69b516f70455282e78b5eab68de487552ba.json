{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport crossFetch from 'cross-fetch';\nexport default class PostgrestBuilder {\n  constructor(builder) {\n    this.shouldThrowOnError = false;\n    this.method = builder.method;\n    this.url = builder.url;\n    this.headers = builder.headers;\n    this.schema = builder.schema;\n    this.body = builder.body;\n    this.shouldThrowOnError = builder.shouldThrowOnError;\n    this.signal = builder.signal;\n    this.allowEmpty = builder.allowEmpty;\n    if (builder.fetch) {\n      this.fetch = builder.fetch;\n    } else if (typeof fetch === 'undefined') {\n      this.fetch = crossFetch;\n    } else {\n      this.fetch = fetch;\n    }\n  }\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n  throwOnError() {\n    this.shouldThrowOnError = true;\n    return this;\n  }\n  then(onfulfilled, onrejected) {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (this.schema === undefined) {\n      // skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers['Accept-Profile'] = this.schema;\n    } else {\n      this.headers['Content-Profile'] = this.schema;\n    }\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers['Content-Type'] = 'application/json';\n    }\n    // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n    // https://github.com/supabase/postgrest-js/pull/247\n    const _fetch = this.fetch;\n    let res = _fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal\n    }).then(res => __awaiter(this, void 0, void 0, function* () {\n      var _a, _b, _c;\n      let error = null;\n      let data = null;\n      let count = null;\n      let status = res.status;\n      let statusText = res.statusText;\n      if (res.ok) {\n        if (this.method !== 'HEAD') {\n          const body = yield res.text();\n          if (body === '') {\n            // Prefer: return=minimal\n          } else if (this.headers['Accept'] === 'text/csv') {\n            data = body;\n          } else if (this.headers['Accept'] && this.headers['Accept'].includes('application/vnd.pgrst.plan+text')) {\n            data = body;\n          } else {\n            data = JSON.parse(body);\n          }\n        }\n        const countHeader = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);\n        const contentRange = (_b = res.headers.get('content-range')) === null || _b === void 0 ? void 0 : _b.split('/');\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1]);\n        }\n      } else {\n        const body = yield res.text();\n        try {\n          error = JSON.parse(body);\n        } catch (_d) {\n          error = {\n            message: body\n          };\n        }\n        if (error && this.allowEmpty && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes('Results contain 0 rows'))) {\n          error = null;\n          status = 200;\n          statusText = 'OK';\n        }\n        if (error && this.shouldThrowOnError) {\n          throw error;\n        }\n      }\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status,\n        statusText\n      };\n      return postgrestResponse;\n    }));\n    if (!this.shouldThrowOnError) {\n      res = res.catch(fetchError => ({\n        error: {\n          message: `FetchError: ${fetchError.message}`,\n          details: '',\n          hint: '',\n          code: fetchError.code || ''\n        },\n        data: null,\n        count: null,\n        status: 0,\n        statusText: ''\n      }));\n    }\n    return res.then(onfulfilled, onrejected);\n  }\n}","map":{"version":3,"mappings":"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","names":["crossFetch","PostgrestBuilder","constructor","builder","method","url","headers","schema","body","shouldThrowOnError","signal","allowEmpty","fetch","throwOnError","then","onfulfilled","onrejected","undefined","includes","_fetch","res","toString","JSON","stringify","__awaiter","error","data","count","status","statusText","ok","text","parse","countHeader","match","contentRange","get","split","length","parseInt","message","details","postgrestResponse","catch","fetchError","hint","code"],"sources":["/Users/weiqi/Desktop/New one /node_modules/@supabase/postgrest-js/src/PostgrestBuilder.ts"],"sourcesContent":["import crossFetch from 'cross-fetch'\n\nimport type { Fetch, PostgrestResponse } from './types'\n\nexport default abstract class PostgrestBuilder<Result>\n  implements PromiseLike<PostgrestResponse<Result>>\n{\n  protected method: 'GET' | 'HEAD' | 'POST' | 'PATCH' | 'DELETE'\n  protected url: URL\n  protected headers: Record<string, string>\n  protected schema?: string\n  protected body?: unknown\n  protected shouldThrowOnError = false\n  protected signal?: AbortSignal\n  protected fetch: Fetch\n  protected allowEmpty: boolean\n\n  constructor(builder: PostgrestBuilder<Result>) {\n    this.method = builder.method\n    this.url = builder.url\n    this.headers = builder.headers\n    this.schema = builder.schema\n    this.body = builder.body\n    this.shouldThrowOnError = builder.shouldThrowOnError\n    this.signal = builder.signal\n    this.allowEmpty = builder.allowEmpty\n\n    if (builder.fetch) {\n      this.fetch = builder.fetch\n    } else if (typeof fetch === 'undefined') {\n      this.fetch = crossFetch\n    } else {\n      this.fetch = fetch\n    }\n  }\n\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n  throwOnError(): this {\n    this.shouldThrowOnError = true\n    return this\n  }\n\n  then<TResult1 = PostgrestResponse<Result>, TResult2 = never>(\n    onfulfilled?:\n      | ((value: PostgrestResponse<Result>) => TResult1 | PromiseLike<TResult1>)\n      | undefined\n      | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): PromiseLike<TResult1 | TResult2> {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (this.schema === undefined) {\n      // skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers['Accept-Profile'] = this.schema\n    } else {\n      this.headers['Content-Profile'] = this.schema\n    }\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers['Content-Type'] = 'application/json'\n    }\n\n    // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n    // https://github.com/supabase/postgrest-js/pull/247\n    const _fetch = this.fetch\n    let res = _fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal,\n    }).then(async (res) => {\n      let error = null\n      let data = null\n      let count: number | null = null\n      let status = res.status\n      let statusText = res.statusText\n\n      if (res.ok) {\n        if (this.method !== 'HEAD') {\n          const body = await res.text()\n          if (body === '') {\n            // Prefer: return=minimal\n          } else if (this.headers['Accept'] === 'text/csv') {\n            data = body\n          } else if (\n            this.headers['Accept'] &&\n            this.headers['Accept'].includes('application/vnd.pgrst.plan+text')\n          ) {\n            data = body\n          } else {\n            data = JSON.parse(body)\n          }\n        }\n\n        const countHeader = this.headers['Prefer']?.match(/count=(exact|planned|estimated)/)\n        const contentRange = res.headers.get('content-range')?.split('/')\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1])\n        }\n      } else {\n        const body = await res.text()\n\n        try {\n          error = JSON.parse(body)\n        } catch {\n          error = {\n            message: body,\n          }\n        }\n\n        if (error && this.allowEmpty && error?.details?.includes('Results contain 0 rows')) {\n          error = null\n          status = 200\n          statusText = 'OK'\n        }\n\n        if (error && this.shouldThrowOnError) {\n          throw error\n        }\n      }\n\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status,\n        statusText,\n      }\n\n      return postgrestResponse\n    })\n    if (!this.shouldThrowOnError) {\n      res = res.catch((fetchError) => ({\n        error: {\n          message: `FetchError: ${fetchError.message}`,\n          details: '',\n          hint: '',\n          code: fetchError.code || '',\n        },\n        data: null,\n        count: null,\n        status: 0,\n        statusText: '',\n      }))\n    }\n\n    return res.then(onfulfilled, onrejected)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}